name: Update README with Multi-Repo Activity
on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Fetch & Render Activity
        id: render
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.MY_PAT }}
          script: |
            const username = 'PhungVietBac';
            const { data: events } = await github.rest.activity.listPublicEventsForUser({
              username,
              per_page: 100,
            });

            let md = '\n';
            const seenRepos = new Set();

            for (const ev of events) {
              const repoName = ev.repo.name;

              const when = new Date(ev.created_at).toLocaleString('en-GB', { timeZone: 'Asia/Ho_Chi_Minh' });

              md += `### [${repoName}](https://github.com/${repoName})\n`;

              switch (ev.type) {
                case 'PushEvent':
                  md += `- **PushEvent** by **${ev.actor.login}** at ${when}\n`;
                  break;
                case 'PullRequestEvent':
                  const pr = ev.payload.pull_request;
                  md += `- **PullRequestEvent**: [#${pr.number} ${pr.title}](${pr.html_url}) by **${ev.actor.login}** (${pr.state}${pr.merged ? ', merged':''}) at ${when}\n`;
                  break;
                case 'IssuesEvent':
                  const issue = ev.payload.issue;
                  md += `- **IssuesEvent**: [#${issue.number} ${issue.title}](${issue.html_url}) by **${ev.actor.login}** (${issue.state}) at ${when}\n`;
                  break;
                case 'IssueCommentEvent':
                  const issue_cmt = ev.payload.issue;
                  const comment = ev.payload.comment.body.split('\n')[0];
                  md += `- **IssueCommentEvent** on [#${issue_cmt.number} ${issue_cmt.title}](${issue_cmt.html_url}) by **${ev.actor.login}**: "${comment}" at ${when}\n`;
                  break;
                case 'ReleaseEvent':
                  const rel = ev.payload.release;
                  md += `- **ReleaseEvent**: [${rel.name || rel.tag_name}](${rel.html_url}) (${rel.tag_name}) by **${ev.actor.login}** at ${when}\n`;
                  break;
                default:
                  md += `- **${ev.type}** by **${ev.actor.login}** at ${when}\n`;
                  break;
              }

              md += `\n`;
            }

            return md;

      - name: Inject into README
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs   = require('fs');
            const md   = ${{ steps.render.outputs.result }}
            const file = 'README.md';
            let readme = fs.readFileSync(file, 'utf8');
            // replace everything between your markers:
            const regex = /<!--START_SECTION:activity-->(.*?)<!--END_SECTION:activity-->/s;
            const match = readme.match(regex);
            readme = readme.replace(match[1], md.replace(/"/g, ''));
            fs.writeFileSync(file, readme, 'utf8');

      - name: Commit & Push if changed
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add README.md
          if git diff --cached --exit-code; then
            echo "✅ No changes to commit"
          else
            git commit -m "⚡ Update README with the recent activity"
            git push origin HEAD:${{ github.ref_name }}
          fi
