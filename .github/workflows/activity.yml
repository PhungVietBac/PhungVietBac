name: Update README with Multi-Repo Activity
on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-readme:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Fetch & Render Activity
        id: render
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const username   = 'PhungVietBac';
            const maxRepos   = 6;
            const eventsPerRepo = 5;
            // 1. list top repos
            const { data: repos } = await github.rest.repos.listForUser({
              username,
              sort: 'updated',
              per_page: maxRepos
            });

            let md = '';
            for (const repo of repos) {
              md += `### [${repo.name}](${repo.html_url})\n`;
              const { data: events } = await github.rest.activity.listRepoEvents({
                owner: username,
                repo: repo.name,
                per_page: eventsPerRepo
              });
              if (events.length === 0) {
                md += `- _No recent events_\n\n`;
                continue;
              }
              for (const ev of events) {
                const when = new Date(ev.created_at)
                  .toLocaleString('en-GB', { timeZone: 'Asia/Ho_Chi_Minh' });

                // Hiển thị chi tiết event
                switch (ev.type) {
                  case 'PushEvent':
                    const commits = ev.payload.commits || [];
                    md += `- **PushEvent**: ${commits.length} commit(s) by **${ev.actor.login}** at ${when}\n`;
                    for (const c of commits) {
                      const sha7 = c.sha.slice(0,7);
                      // build web URL from repo.html_url
                      const commitUrl = `${repo.html_url}/commit/${c.sha}`;
                      md += `  - [\`${sha7}\`]( ${commitUrl} ): ${c.message} _(by ${c.author.name})_\n`;
                    }
                    break;
                  case 'PullRequestEvent':
                    const pr = ev.payload.pull_request;
                    md += `- **PullRequestEvent**: [#${pr.number} ${pr.title}](${pr.html_url}) by **${ev.actor.login}** (${pr.state}${pr.merged? ', merged':'')}) at ${when}\n`;
                    break;
                  case 'IssuesEvent':
                    const issue = ev.payload.issue;
                    md += `- **IssuesEvent**: [#${issue.number} ${issue.title}](${issue.html_url}) by **${ev.actor.login}** (${issue.state}) at ${when}\n`;
                    break;
                  case 'IssueCommentEvent':
                    const issue = ev.payload.issue;
                    const comment = ev.payload.comment.body.split('\n')[0];
                    md += `- **IssueCommentEvent** on [#${issue.number} ${issue.title}](${issue.html_url}) by **${ev.actor.login}**: "${comment}" at ${when}\n`;
                    break;
                  case 'ReleaseEvent':
                    const rel = ev.payload.release;
                    md += `- **ReleaseEvent**: [${rel.name || rel.tag_name}](${rel.html_url}) (${rel.tag_name}) by **${ev.actor.login}** at ${when}\n`;
                    break;
                  default:
                    md += `- **${ev.type}** by **${ev.actor.login}** at ${when} ([repo](${repo.html_url}))\n`;
                }
              }
              md += `\n`;
            }

            // return the markdown block
            return md;

      - name: Inject into README
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs   = require('fs');
            const md   = `\n${{ steps.render.outputs.result }}\n`;
            const file = 'README.md';
            let readme = fs.readFileSync(file, 'utf8');
            // replace everything between your markers:
            const regex = /<!--START_SECTION:activity-->(.*?)<!--END_SECTION:activity-->/s;
            const match = readme.match(regex);
            readme = readme.replace(match[1], md.replace(/"/g, ''));
            fs.writeFileSync(file, readme, 'utf8');

      - name: Commit & Push if changed
        run: |
          git config user.name  "PhungVietBac"
          git config user.email "bacphungviet@gmail.com"
          git add README.md
          if git diff --cached --exit-code; then
            echo "✅ No changes to commit"
          else
            git commit -m "⚡ Update README with the recent activity"
            git push origin HEAD:${{ github.ref_name }}
          fi
